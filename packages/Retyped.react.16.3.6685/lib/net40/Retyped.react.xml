<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Retyped.react</name>
    </assembly>
    <members>
        <member name="T:Retyped.react.React.ComponentLifecycle`3.shouldComponentUpdateFn">
            <summary>
            Called to determine whether the change in props and state should trigger a re-render.
            `Component` always returns true.
            `PureComponent` implements a shallow comparison on props and state and returns true if any
            props or states have changed.
            If false is returned, `Component#render`, `componentWillUpdate`
            and `componentDidUpdate` will not be called.
            </summary>
        </member>
        <member name="T:Retyped.react.React.ComponentLifecycle`3.componentDidCatchFn">
            <summary>
            Catches exceptions generated in descendant components. Unhandled exceptions will cause
            the entire component tree to unmount.
            </summary>
        </member>
        <member name="P:Retyped.react.React.ComponentLifecycle`3.componentDidMount">
            <summary>
            Called immediately after a compoment is mounted. Setting state here will trigger re-rendering.
            </summary>
        </member>
        <member name="P:Retyped.react.React.ComponentLifecycle`3.shouldComponentUpdate">
            <summary>
            Called to determine whether the change in props and state should trigger a re-render.
            `Component` always returns true.
            `PureComponent` implements a shallow comparison on props and state and returns true if any
            props or states have changed.
            If false is returned, `Component#render`, `componentWillUpdate`
            and `componentDidUpdate` will not be called.
            </summary>
        </member>
        <member name="P:Retyped.react.React.ComponentLifecycle`3.componentWillUnmount">
            <summary>
            Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as
            cancelled network requests, or cleaning up any DOM elements created in `componentDidMount`.
            </summary>
        </member>
        <member name="P:Retyped.react.React.ComponentLifecycle`3.componentDidCatch">
            <summary>
            Catches exceptions generated in descendant components. Unhandled exceptions will cause
            the entire component tree to unmount.
            </summary>
        </member>
        <member name="P:Retyped.react.React.ComponentLifecycle`3.componentWillMount">
            <summary>
            Called immediately before mounting occurs, and before `Component#render`.
            Avoid introducing any side-effects or subscriptions in this method.
            Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps
            prevents this from being invoked.
            @deprecated 16.3, use componentDidMount or the constructor instead; will stop working in React 17
            </summary>
            <seealso>https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state</seealso>
            <seealso>https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path</seealso>
        </member>
        <member name="P:Retyped.react.React.ComponentLifecycle`3.UNSAFE_componentWillMount">
            <summary>
            Called immediately before mounting occurs, and before `Component#render`.
            Avoid introducing any side-effects or subscriptions in this method.
            This method will not stop working in React 17.
            Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps
            prevents this from being invoked.
            @deprecated 16.3, use componentDidMount or the constructor instead
            </summary>
            <seealso>https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state</seealso>
            <seealso>https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path</seealso>
        </member>
        <member name="P:Retyped.react.React.ComponentLifecycle`3.componentWillReceiveProps">
            <summary>
            Called when the component may be receiving new props.
            React may call this even if props have not changed, so be sure to compare new and existing
            props if you only want to handle changes.
            Calling `Component#setState` generally does not trigger this method.
            Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps
            prevents this from being invoked.
            @deprecated 16.3, use static getDerivedStateFromProps instead; will stop working in React 17
            </summary>
            <seealso>https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props</seealso>
            <seealso>https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path</seealso>
        </member>
        <member name="P:Retyped.react.React.ComponentLifecycle`3.UNSAFE_componentWillReceiveProps">
            <summary>
            Called when the component may be receiving new props.
            React may call this even if props have not changed, so be sure to compare new and existing
            props if you only want to handle changes.
            Calling `Component#setState` generally does not trigger this method.
            This method will not stop working in React 17.
            Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps
            prevents this from being invoked.
            @deprecated 16.3, use static getDerivedStateFromProps instead
            </summary>
            <seealso>https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props</seealso>
            <seealso>https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path</seealso>
        </member>
        <member name="P:Retyped.react.React.ComponentLifecycle`3.componentWillUpdate">
            <summary>
            Called immediately before rendering when new props or state is received. Not called for the initial render.
            Note: You cannot call `Component#setState` here.
            Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps
            prevents this from being invoked.
            @deprecated 16.3, use getSnapshotBeforeUpdate instead; will stop working in React 17
            </summary>
            <seealso>https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update</seealso>
            <seealso>https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path</seealso>
        </member>
        <member name="P:Retyped.react.React.ComponentLifecycle`3.UNSAFE_componentWillUpdate">
            <summary>
            Called immediately before rendering when new props or state is received. Not called for the initial render.
            Note: You cannot call `Component#setState` here.
            This method will not stop working in React 17.
            Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps
            prevents this from being invoked.
            @deprecated 16.3, use getSnapshotBeforeUpdate instead
            </summary>
            <seealso>https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update</seealso>
            <seealso>https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path</seealso>
        </member>
        <member name="T:Retyped.react.React.NewLifecycle`3.getSnapshotBeforeUpdateFn">
            <summary>
            Runs before React applies the result of `render` to the document, and
            returns an object to be given to componentDidUpdate. Useful for saving
            things such as scroll position before `render` causes changes to it.
            Note: the presence of getSnapshotBeforeUpdate prevents any of the deprecated
            lifecycle events from running.
            </summary>
        </member>
        <member name="T:Retyped.react.React.NewLifecycle`3.componentDidUpdateFn">
            <summary>
            Called immediately after updating occurs. Not called for the initial render.
            The snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.
            </summary>
        </member>
        <member name="P:Retyped.react.React.NewLifecycle`3.getSnapshotBeforeUpdate">
            <summary>
            Runs before React applies the result of `render` to the document, and
            returns an object to be given to componentDidUpdate. Useful for saving
            things such as scroll position before `render` causes changes to it.
            Note: the presence of getSnapshotBeforeUpdate prevents any of the deprecated
            lifecycle events from running.
            </summary>
        </member>
        <member name="P:Retyped.react.React.NewLifecycle`3.componentDidUpdate">
            <summary>
            Called immediately after updating occurs. Not called for the initial render.
            The snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.
            </summary>
        </member>
        <member name="T:Retyped.react.React.DeprecatedLifecycle`2.componentWillReceivePropsFn">
            <summary>
            Called when the component may be receiving new props.
            React may call this even if props have not changed, so be sure to compare new and existing
            props if you only want to handle changes.
            Calling `Component#setState` generally does not trigger this method.
            Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps
            prevents this from being invoked.
            @deprecated 16.3, use static getDerivedStateFromProps instead; will stop working in React 17
            </summary>
            <seealso>https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props</seealso>
            <seealso>https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path</seealso>
        </member>
        <member name="T:Retyped.react.React.DeprecatedLifecycle`2.UNSAFE_componentWillReceivePropsFn">
            <summary>
            Called when the component may be receiving new props.
            React may call this even if props have not changed, so be sure to compare new and existing
            props if you only want to handle changes.
            Calling `Component#setState` generally does not trigger this method.
            This method will not stop working in React 17.
            Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps
            prevents this from being invoked.
            @deprecated 16.3, use static getDerivedStateFromProps instead
            </summary>
            <seealso>https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props</seealso>
            <seealso>https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path</seealso>
        </member>
        <member name="T:Retyped.react.React.DeprecatedLifecycle`2.componentWillUpdateFn">
            <summary>
            Called immediately before rendering when new props or state is received. Not called for the initial render.
            Note: You cannot call `Component#setState` here.
            Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps
            prevents this from being invoked.
            @deprecated 16.3, use getSnapshotBeforeUpdate instead; will stop working in React 17
            </summary>
            <seealso>https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update</seealso>
            <seealso>https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path</seealso>
        </member>
        <member name="T:Retyped.react.React.DeprecatedLifecycle`2.UNSAFE_componentWillUpdateFn">
            <summary>
            Called immediately before rendering when new props or state is received. Not called for the initial render.
            Note: You cannot call `Component#setState` here.
            This method will not stop working in React 17.
            Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps
            prevents this from being invoked.
            @deprecated 16.3, use getSnapshotBeforeUpdate instead
            </summary>
            <seealso>https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update</seealso>
            <seealso>https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path</seealso>
        </member>
        <member name="P:Retyped.react.React.DeprecatedLifecycle`2.componentWillMount">
            <summary>
            Called immediately before mounting occurs, and before `Component#render`.
            Avoid introducing any side-effects or subscriptions in this method.
            Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps
            prevents this from being invoked.
            @deprecated 16.3, use componentDidMount or the constructor instead; will stop working in React 17
            </summary>
            <seealso>https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state</seealso>
            <seealso>https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path</seealso>
        </member>
        <member name="P:Retyped.react.React.DeprecatedLifecycle`2.UNSAFE_componentWillMount">
            <summary>
            Called immediately before mounting occurs, and before `Component#render`.
            Avoid introducing any side-effects or subscriptions in this method.
            This method will not stop working in React 17.
            Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps
            prevents this from being invoked.
            @deprecated 16.3, use componentDidMount or the constructor instead
            </summary>
            <seealso>https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state</seealso>
            <seealso>https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path</seealso>
        </member>
        <member name="P:Retyped.react.React.DeprecatedLifecycle`2.componentWillReceiveProps">
            <summary>
            Called when the component may be receiving new props.
            React may call this even if props have not changed, so be sure to compare new and existing
            props if you only want to handle changes.
            Calling `Component#setState` generally does not trigger this method.
            Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps
            prevents this from being invoked.
            @deprecated 16.3, use static getDerivedStateFromProps instead; will stop working in React 17
            </summary>
            <seealso>https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props</seealso>
            <seealso>https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path</seealso>
        </member>
        <member name="P:Retyped.react.React.DeprecatedLifecycle`2.UNSAFE_componentWillReceiveProps">
            <summary>
            Called when the component may be receiving new props.
            React may call this even if props have not changed, so be sure to compare new and existing
            props if you only want to handle changes.
            Calling `Component#setState` generally does not trigger this method.
            This method will not stop working in React 17.
            Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps
            prevents this from being invoked.
            @deprecated 16.3, use static getDerivedStateFromProps instead
            </summary>
            <seealso>https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props</seealso>
            <seealso>https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path</seealso>
        </member>
        <member name="P:Retyped.react.React.DeprecatedLifecycle`2.componentWillUpdate">
            <summary>
            Called immediately before rendering when new props or state is received. Not called for the initial render.
            Note: You cannot call `Component#setState` here.
            Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps
            prevents this from being invoked.
            @deprecated 16.3, use getSnapshotBeforeUpdate instead; will stop working in React 17
            </summary>
            <seealso>https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update</seealso>
            <seealso>https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path</seealso>
        </member>
        <member name="P:Retyped.react.React.DeprecatedLifecycle`2.UNSAFE_componentWillUpdate">
            <summary>
            Called immediately before rendering when new props or state is received. Not called for the initial render.
            Note: You cannot call `Component#setState` here.
            This method will not stop working in React 17.
            Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps
            prevents this from being invoked.
            @deprecated 16.3, use getSnapshotBeforeUpdate instead
            </summary>
            <seealso>https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update</seealso>
            <seealso>https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path</seealso>
        </member>
        <member name="P:Retyped.react.React.SyntheticEvent`1.currentTarget">
            <summary>
            A reference to the element on which the event listener is registered.
            </summary>
        </member>
        <member name="P:Retyped.react.React.SyntheticEvent`1.target">
            <summary>
            A reference to the element from which the event was originally dispatched.
            This might be a child element to the element on which the event listener is registered.
            </summary>
            <seealso>currentTarget</seealso>
        </member>
        <member name="M:Retyped.react.React.KeyboardEvent`1.getModifierState(System.String)">
            <summary>
            See [DOM Level 3 Events spec](https://www.w3.org/TR/uievents-key/#keys-modifier). for a list of valid (case-sensitive) arguments to this method.
            </summary>
        </member>
        <member name="P:Retyped.react.React.KeyboardEvent`1.key">
            <summary>
            See the [DOM Level 3 Events spec](https://www.w3.org/TR/uievents-key/#named-key-attribute-values). for possible values
            </summary>
        </member>
        <member name="M:Retyped.react.React.MouseEvent`1.getModifierState(System.String)">
            <summary>
            See [DOM Level 3 Events spec](https://www.w3.org/TR/uievents-key/#keys-modifier). for a list of valid (case-sensitive) arguments to this method.
            </summary>
        </member>
        <member name="M:Retyped.react.React.TouchEvent`1.getModifierState(System.String)">
            <summary>
            See [DOM Level 3 Events spec](https://www.w3.org/TR/uievents-key/#keys-modifier). for a list of valid (case-sensitive) arguments to this method.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Retyped.react.React.Props`1" -->
        <member name="P:Retyped.react.React.HTMLAttributes`1.aria_activedescendant">
            <summary>
            Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.
            </summary>
        </member>
        <member name="P:Retyped.react.React.HTMLAttributes`1.aria_atomic">
            <summary>
            Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.
            </summary>
        </member>
        <member name="P:Retyped.react.React.HTMLAttributes`1.aria_autocomplete">
            <summary>
            Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be
            presented if they are made.
            </summary>
        </member>
        <member name="P:Retyped.react.React.HTMLAttributes`1.aria_busy">
            <summary>
            Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user.
            </summary>
        </member>
        <member name="P:Retyped.react.React.HTMLAttributes`1.aria_checked">
            <summary>
            Indicates the current "checked" state of checkboxes, radio buttons, and other widgets.
            </summary>
            <seealso>aria-pressed @see aria-selected.</seealso>
        </member>
        <member name="P:Retyped.react.React.HTMLAttributes`1.aria_colcount">
            <summary>
            Defines the total number of columns in a table, grid, or treegrid.
            </summary>
            <seealso>aria-colindex.</seealso>
        </member>
        <member name="P:Retyped.react.React.HTMLAttributes`1.aria_colindex">
            <summary>
            Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.
            </summary>
            <seealso>aria-colcount @see aria-colspan.</seealso>
        </member>
        <member name="P:Retyped.react.React.HTMLAttributes`1.aria_colspan">
            <summary>
            Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.
            </summary>
            <seealso>aria-colindex @see aria-rowspan.</seealso>
        </member>
        <member name="P:Retyped.react.React.HTMLAttributes`1.aria_controls">
            <summary>
            Identifies the element (or elements) whose contents or presence are controlled by the current element.
            </summary>
            <seealso>aria-owns.</seealso>
        </member>
        <member name="P:Retyped.react.React.HTMLAttributes`1.aria_current">
            <summary>
            Indicates the element that represents the current item within a container or set of related elements.
            </summary>
        </member>
        <member name="P:Retyped.react.React.HTMLAttributes`1.aria_describedby">
            <summary>
            Identifies the element (or elements) that describes the object.
            </summary>
            <seealso>aria-labelledby</seealso>
        </member>
        <member name="P:Retyped.react.React.HTMLAttributes`1.aria_details">
            <summary>
            Identifies the element that provides a detailed, extended description for the object.
            </summary>
            <seealso>aria-describedby.</seealso>
        </member>
        <member name="P:Retyped.react.React.HTMLAttributes`1.aria_disabled">
            <summary>
            Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.
            </summary>
            <seealso>aria-hidden @see aria-readonly.</seealso>
        </member>
        <member name="P:Retyped.react.React.HTMLAttributes`1.aria_dropeffect">
            <summary>
            Indicates what functions can be performed when a dragged object is released on the drop target.
            @deprecated in ARIA 1.1
            </summary>
        </member>
        <member name="P:Retyped.react.React.HTMLAttributes`1.aria_errormessage">
            <summary>
            Identifies the element that provides an error message for the object.
            </summary>
            <seealso>aria-invalid @see aria-describedby.</seealso>
        </member>
        <member name="P:Retyped.react.React.HTMLAttributes`1.aria_expanded">
            <summary>
            Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.
            </summary>
        </member>
        <member name="P:Retyped.react.React.HTMLAttributes`1.aria_flowto">
            <summary>
            Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,
            allows assistive technology to override the general default of reading in document source order.
            </summary>
        </member>
        <member name="P:Retyped.react.React.HTMLAttributes`1.aria_grabbed">
            <summary>
            Indicates an element's "grabbed" state in a drag-and-drop operation.
            @deprecated in ARIA 1.1
            </summary>
        </member>
        <member name="P:Retyped.react.React.HTMLAttributes`1.aria_haspopup">
            <summary>
            Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.
            </summary>
        </member>
        <member name="P:Retyped.react.React.HTMLAttributes`1.aria_hidden">
            <summary>
            Indicates whether the element is exposed to an accessibility API.
            </summary>
            <seealso>aria-disabled.</seealso>
        </member>
        <member name="P:Retyped.react.React.HTMLAttributes`1.aria_invalid">
            <summary>
            Indicates the entered value does not conform to the format expected by the application.
            </summary>
            <seealso>aria-errormessage.</seealso>
        </member>
        <member name="P:Retyped.react.React.HTMLAttributes`1.aria_keyshortcuts">
            <summary>
            Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.
            </summary>
        </member>
        <member name="P:Retyped.react.React.HTMLAttributes`1.aria_label">
            <summary>
            Defines a string value that labels the current element.
            </summary>
            <seealso>aria-labelledby.</seealso>
        </member>
        <member name="P:Retyped.react.React.HTMLAttributes`1.aria_labelledby">
            <summary>
            Identifies the element (or elements) that labels the current element.
            </summary>
            <seealso>aria-describedby.</seealso>
        </member>
        <member name="P:Retyped.react.React.HTMLAttributes`1.aria_level">
            <summary>
            Defines the hierarchical level of an element within a structure.
            </summary>
        </member>
        <member name="P:Retyped.react.React.HTMLAttributes`1.aria_live">
            <summary>
            Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.
            </summary>
        </member>
        <member name="P:Retyped.react.React.HTMLAttributes`1.aria_modal">
            <summary>
            Indicates whether an element is modal when displayed.
            </summary>
        </member>
        <member name="P:Retyped.react.React.HTMLAttributes`1.aria_multiline">
            <summary>
            Indicates whether a text box accepts multiple lines of input or only a single line.
            </summary>
        </member>
        <member name="P:Retyped.react.React.HTMLAttributes`1.aria_multiselectable">
            <summary>
            Indicates that the user may select more than one item from the current selectable descendants.
            </summary>
        </member>
        <member name="P:Retyped.react.React.HTMLAttributes`1.aria_orientation">
            <summary>
            Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous.
            </summary>
        </member>
        <member name="P:Retyped.react.React.HTMLAttributes`1.aria_owns">
            <summary>
            Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship
            between DOM elements where the DOM hierarchy cannot be used to represent the relationship.
            </summary>
            <seealso>aria-controls.</seealso>
        </member>
        <member name="P:Retyped.react.React.HTMLAttributes`1.aria_placeholder">
            <summary>
            Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.
            A hint could be a sample value or a brief description of the expected format.
            </summary>
        </member>
        <member name="P:Retyped.react.React.HTMLAttributes`1.aria_posinset">
            <summary>
            Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.
            </summary>
            <seealso>aria-setsize.</seealso>
        </member>
        <member name="P:Retyped.react.React.HTMLAttributes`1.aria_pressed">
            <summary>
            Indicates the current "pressed" state of toggle buttons.
            </summary>
            <seealso>aria-checked @see aria-selected.</seealso>
        </member>
        <member name="P:Retyped.react.React.HTMLAttributes`1.aria_readonly">
            <summary>
            Indicates that the element is not editable, but is otherwise operable.
            </summary>
            <seealso>aria-disabled.</seealso>
        </member>
        <member name="P:Retyped.react.React.HTMLAttributes`1.aria_relevant">
            <summary>
            Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.
            </summary>
            <seealso>aria-atomic.</seealso>
        </member>
        <member name="P:Retyped.react.React.HTMLAttributes`1.aria_required">
            <summary>
            Indicates that user input is required on the element before a form may be submitted.
            </summary>
        </member>
        <member name="P:Retyped.react.React.HTMLAttributes`1.aria_roledescription">
            <summary>
            Defines a human-readable, author-localized description for the role of an element.
            </summary>
        </member>
        <member name="P:Retyped.react.React.HTMLAttributes`1.aria_rowcount">
            <summary>
            Defines the total number of rows in a table, grid, or treegrid.
            </summary>
            <seealso>aria-rowindex.</seealso>
        </member>
        <member name="P:Retyped.react.React.HTMLAttributes`1.aria_rowindex">
            <summary>
            Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.
            </summary>
            <seealso>aria-rowcount @see aria-rowspan.</seealso>
        </member>
        <member name="P:Retyped.react.React.HTMLAttributes`1.aria_rowspan">
            <summary>
            Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.
            </summary>
            <seealso>aria-rowindex @see aria-colspan.</seealso>
        </member>
        <member name="P:Retyped.react.React.HTMLAttributes`1.aria_selected">
            <summary>
            Indicates the current "selected" state of various widgets.
            </summary>
            <seealso>aria-checked @see aria-pressed.</seealso>
        </member>
        <member name="P:Retyped.react.React.HTMLAttributes`1.aria_setsize">
            <summary>
            Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.
            </summary>
            <seealso>aria-posinset.</seealso>
        </member>
        <member name="P:Retyped.react.React.HTMLAttributes`1.aria_sort">
            <summary>
            Indicates if items in a table or grid are sorted in ascending or descending order.
            </summary>
        </member>
        <member name="P:Retyped.react.React.HTMLAttributes`1.aria_valuemax">
            <summary>
            Defines the maximum allowed value for a range widget.
            </summary>
        </member>
        <member name="P:Retyped.react.React.HTMLAttributes`1.aria_valuemin">
            <summary>
            Defines the minimum allowed value for a range widget.
            </summary>
        </member>
        <member name="P:Retyped.react.React.HTMLAttributes`1.aria_valuenow">
            <summary>
            Defines the current value for a range widget.
            </summary>
            <seealso>aria-valuetext.</seealso>
        </member>
        <member name="P:Retyped.react.React.HTMLAttributes`1.aria_valuetext">
            <summary>
            Defines the human readable text alternative of aria-valuenow for a range widget.
            </summary>
        </member>
        <member name="P:Retyped.react.React.ErrorInfo.componentStack">
            <summary>
            Captures which component contained the exception, and its ancestors.
            </summary>
        </member>
        <member name="T:Retyped.react.React.ClassType`3">
            <summary>
            We use an intersection type to infer multiple type parameters from
            a single argument, which is useful for many top-level API defs.
            See https://github.com/Microsoft/TypeScript/issues/7234 for more info.
            </summary>
        </member>
    </members>
</doc>
